{% comment %}
  App Block: Product Carousel
  Compatibility: Online Store 2.0
{% endcomment %}

{{ 'product-carousel.css' | asset_url | stylesheet_tag }}

<div
  class="flex flex-col-reverse md:flex-row w-full items-center opacity-0 transition-opacity duration-{{ block.settings.animation_duration }} ease-out my-12 md:mb-0"
  id="carousel-container-{{ block.id }}"
  role="region"
  aria-roledescription="carousel"
  aria-label="Product carousel"
>
  <!-- ContrÃ´les du slider -->
  <button
    type="button"
    class="group absolute -start-4 top-0 z-30 flex h-full cursor-pointer items-center justify-center px-4"
    data-carousel-prev
  >
    <span class="inline-flex h-10 w-10 items-center justify-center">
      {% render 'chevron-left' %}
      <span class="sr-only">Previous</span>
    </span>
  </button>

  <!-- Conteneur de texte -->
  <div
    class="w-full md:w-1/2 h-[300px] md:h-auto px-6 flex flex-col justify-center space-y-4 md:space-y-5 md:text-left opacity-0 {{ block.settings.text_transition_effect }} transition-all duration-{{ block.settings.animation_duration }} ease-out"
    id="text-container-{{ block.id }}"
  >
    <h2
      id="product-title-{{ block.id }}"
      class="!text-6xl !font-bold uppercase opacity-0 {{ block.settings.text_transition_effect }} transition-all duration-{{ block.settings.animation_duration }} ease-out"
      style="color: {{ block.settings.carousel_title_color }};"
    >
      <span id="title-1-{{ block.id }}" class="block leading-tight"></span>
      <span id="title-2-{{ block.id }}" class="block leading-tight"></span>
      <span id="title-3-{{ block.id }}" class="block leading-tight"></span>
    </h2>

    <div class="product-description-price">
      <h3
        id="product-description-{{ block.id }}"
        class="!text-3xl mb-4 opacity-0 {{ block.settings.text_transition_effect }} transition-all duration-{{ block.settings.animation_duration }} ease-out"
        style="color: {{ block.settings.carousel_description_color }};"
      ></h3>

      {% if block.settings.show_price == true %}
        <span
          id="product-price-{{ block.id }}"
          class="opacity-0 {{ block.settings.text_transition_effect }} transition-all duration-{{ block.settings.animation_duration }} ease-out block"
          style="color: {{ block.settings.carousel_price_color }};"
        ></span>
      {% endif %}
    </div>

    {% if block.settings.show_button == true and block.settings.button_text != blank %}
      {% assign a_classes = 'flex items-center gap-2' %}

      {% if block.settings.button_border == true %}
        {% assign a_classes = a_classes | append: ' border px-4' %}
      {% endif %}

      {% if block.settings.button_border_radius != 'rounded-none' %}
        {% assign a_classes = a_classes | append: ' ' | append: block.settings.button_border_radius %}
      {% endif %}

      <div
        class="flex font-bold uppercase items-center gap-2 !text-3xl opacity-0 {{ block.settings.text_transition_effect }} transition-all duration-{{ block.settings.animation_duration }} ease-out"
        id="button-container-{{ block.id }}"
        style="color: {{ block.settings.carousel_button_color }};"
      >
        <a
          id="product-button-{{ block.id }}"
          href=""
          class="{{ a_classes }}"
          aria-label="View product details"
        >
          {{ block.settings.button_text }}
          <button
            class="flex items-center justify-center"
            aria-hidden="true"
          >
            {% case block.settings.button_icon %}
              {% when 'none' %}
                {% comment %} Render none {% endcomment %}
              {% when 'arrow-right' %}
                {% render 'arrow-right' %}
              {% when 'arrow-left' %}
                {% render 'arrow-left' %}
              {% when 'cart' %}
                {% render 'shopping-cart' %}
              {% when 'bag' %}
                {% render 'shopping-bag' %}
              {% when 'heart' %}
                {% render 'heart' %}
              {% when 'star' %}
                {% render 'star' %}
              {% when 'chevron-right' %}
                {% render 'chevron-right' %}
              {% when 'chevron-left' %}
                {% render 'chevron-left' %}
              {% when 'arrow-up' %}
                {% render 'arrow-up' %}
              {% when 'arrow-down' %}
                {% render 'arrow-down' %}
              {% when 'cash' %}
                {% render 'cash' %}
              {% when 'credit-card' %}
                {% render 'credit-card' %}
              {% when 'wallet' %}
                {% render 'wallet' %}
              {% else %}
                {% render 'arrow-right' %}
            {% endcase %}
          </button>
        </a>
      </div>
    {% endif %}
  </div>

  <!-- Carousel des produits -->
  <div
    class="w-full md:w-1/2 h-[300px] md:h-auto relative opacity-0 {{ block.settings.image_transition_effect }} transition-all duration-{{ block.settings.animation_duration }} ease-out"
    id="carousel-wrapper-{{ block.id }}"
  >
    {% if block.settings.products != blank %}
      <div class="relative h-full">
        <div
          id="product-carousel-{{ block.id }}"
          class="h-full flex items-center justify-center"
          aria-live="polite"
        >
          {% for product in block.settings.products %}
            <img
              src="{{ product.featured_image | image_url: width: 580, height: 580 }}"
              alt="{{ product.title }}"
              class="rounded-3xl w-full h-full object-contain product-image-{{ block.id }} transition-all duration-{{ block.settings.animation_duration }} ease-out {% if forloop.first %}opacity-100{% else %}opacity-0 {{ block.settings.image_transition_effect }} hidden{% endif %}"
              data-title1="{{ product.metafields.custom.title1 | escape }}"
              data-title2="{{ product.metafields.custom.title2 | escape }}"
              data-title3="{{ product.metafields.custom.title3 | escape }}"
              data-description="{{ product.metafields.custom.description_short | escape }}"
              data-price="{{ product.price | money_with_currency }}"
              data-producturl="{{ product.url }}"
              width="580"
              height="580"
              loading="lazy"
            >
          {% endfor %}
        </div>
      </div>
    {% endif %}
  </div>

  <!-- Slider controls -->
  <button
    type="button"
    class="group absolute -end-4 top-0 z-30 flex h-full cursor-pointer items-center justify-center px-4"
    data-carousel-next
  >
    <span class="inline-flex h-10 w-10 items-center justify-center">
      {% render 'chevron-right' %}
      <span class="sr-only">Next</span>
    </span>
  </button>

  <!-- Slider indicators -->
  <div
    id="slider-indicators-{{ block.id }}"
    class="absolute z-30 flex -translate-x-1/2 left-1/2 space-x-10 rtl:space-x-reverse -bottom-7"
  >
    {% for product in block.settings.products %}
      <button
        class="w-3 h-3 rounded-full bg-gray-400 opacity-50 transition-all duration-500 cursor-pointer"
        aria-label="Slide {{ forloop.index }}"
        data-index="{{ forloop.index0 }}"
      ></button>
    {% endfor %}
  </div>
</div>

{% comment %} Unused div for tailwin classes {% endcomment %}
{% render 'tailwind' %}

<script>
  function initProductCarousel(blockId) {
    const images = document.querySelectorAll(`.product-image-${blockId}`);
    const elements = {
      titleContainer: document.getElementById(`product-title-${blockId}`),
      title1: document.getElementById(`title-1-${blockId}`),
      title2: document.getElementById(`title-2-${blockId}`),
      title3: document.getElementById(`title-3-${blockId}`),
      description: document.getElementById(`product-description-${blockId}`),
      price: document.getElementById(`product-price-${blockId}`),
      buttonContainer: document.getElementById(`button-container-${blockId}`),
      productButton: document.getElementById(`product-button-${blockId}`),
      carouselContainer: document.getElementById(`carousel-container-${blockId}`),
      carouselWrapper: document.getElementById(`carousel-wrapper-${blockId}`),
      textContainer: document.getElementById(`text-container-${blockId}`),
      productCarousel: document.getElementById(`product-carousel-${blockId}`),
      prevButton: document.querySelector(`#carousel-container-${blockId} [data-carousel-prev]`),
      nextButton: document.querySelector(`#carousel-container-${blockId} [data-carousel-next]`),
      indicators: document.querySelectorAll(`#slider-indicators-${blockId} button`)
    };
  
    let currentIndex = 0;
    let isAnimating = false;
    let autoplayInterval;
    const imageChangeDelay = Math.min(5000, Math.max(3000, {{ block.settings.image_change_delay }} || 5000));
    const textChangeDelay = Math.min(300, Math.max(200, {{ block.settings.text_change_delay }} || 200));
    const transitionClass = '{{ block.settings.image_transition_effect }}';
    const textEffectClass = '{{ block.settings.text_transition_effect }}';
    const animationDuration = Math.min(1000, Math.max(300, {{ block.settings.animation_duration }} || 700));
  
    const toggleClasses = (element, classes, add = true) => {
      if (!element) return;
      classes.forEach(cls => element.classList[add ? 'add' : 'remove'](cls));
    };
  
    const showTextAnimation = (isHide = false) => {
      let delay = 0;
      const elementsToAnimate = [
        elements.textContainer,
        elements.titleContainer,
        elements.description,
        elements.price,
        elements.buttonContainer
      ];
  
      elementsToAnimate.forEach((element) => {
        if (element) {
          setTimeout(() => {
            if (isHide) {
              element.classList.add('opacity-0', textEffectClass);
            } else {
              element.classList.remove('opacity-0', textEffectClass);
            }
          }, delay);
          delay += textChangeDelay;
        }
      });
    };
  
    const updateIndicators = () => {
      elements.indicators.forEach((indicator, index) => {
        if (index === currentIndex) {
          indicator.classList.remove('opacity-50');
          indicator.classList.add('opacity-100');
        } else {
          indicator.classList.add('opacity-50');
          indicator.classList.remove('opacity-100');
        }
      });
    };
  
    const goToSlide = (index) => {
      if (isAnimating || index === currentIndex) return;
      isAnimating = true;
  
      // Reset autoplay timer
      clearInterval(autoplayInterval);
      startAutoplay();
  
      // Hide text
      showTextAnimation(true);
  
      setTimeout(() => {
        const currentImage = images[currentIndex];
        const nextImage = images[index];
  
        // Prepare next image
        nextImage.classList.remove('hidden');
  
        // Hide current image
        toggleClasses(currentImage, ['opacity-100'], false);
        toggleClasses(currentImage, ['opacity-0', transitionClass], true);
  
        // Show new image
        setTimeout(() => {
          toggleClasses(nextImage, ['opacity-0', transitionClass], false);
          toggleClasses(nextImage, ['opacity-100'], true);
  
          setTimeout(() => {
            currentImage.classList.add('hidden');
            currentIndex = index;
            updateContent(nextImage);
            updateIndicators();
            isAnimating = false;
          }, animationDuration);
        }, 50);
      }, animationDuration);
    };
  
    const showInitialState = () => {
      toggleClasses(elements.carouselContainer, ['opacity-0'], false);
      toggleClasses(elements.carouselWrapper, ['opacity-0', transitionClass], false);
      setTimeout(() => {
        initializeCarousel();
        showTextAnimation(false);
        updateIndicators();
      }, animationDuration);
    };
  
    const initializeCarousel = () => {
      const firstImage = images[0];
      if (firstImage) updateContent(firstImage);
  
      if (firstImage && elements.productCarousel) {
        const setCarouselHeight = () => {
          const height = firstImage.offsetHeight;
          if (height > 0) {
            elements.productCarousel.style.position = 'relative';
            elements.productCarousel.style.height = `${height}px`;
  
            images.forEach(img => {
              img.style.position = 'absolute';
              img.style.top = '0';
              img.style.left = '0';
              img.style.width = '100%';
            });
          } else {
            setTimeout(setCarouselHeight, 100);
          }
        };
  
        if (firstImage.complete) {
          setCarouselHeight();
        } else {
          firstImage.onload = setCarouselHeight;
        }
      }
    };
  
    const updateContent = (image) => {
      if (!image) return;
      elements.title1.textContent = image.dataset.title1;
      elements.title2.textContent = image.dataset.title2;
      elements.title3.textContent = image.dataset.title3;
      elements.description.textContent = image.dataset.description;
      if(elements.price) elements.price.textContent = image.dataset.price;
      if (elements.productButton) elements.productButton.href = image.dataset.producturl;
      showTextAnimation(false);
    };
  
    const nextSlide = () => {
      const nextIndex = (currentIndex + 1) % images.length;
      goToSlide(nextIndex);
    };
  
    const prevSlide = () => {
      const prevIndex = (currentIndex - 1 + images.length) % images.length;
      goToSlide(prevIndex);
    };
  
    const startAutoplay = () => {
      autoplayInterval = setInterval(nextSlide, imageChangeDelay);
    };
  
    // Event listeners
    if (elements.prevButton) {
      elements.prevButton.addEventListener('click', () => {
        prevSlide();
      });
    }
  
    if (elements.nextButton) {
      elements.nextButton.addEventListener('click', () => {
        nextSlide();
      });
    }
  
    elements.indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        goToSlide(index);
      });
    });
  
    // Initialize carousel
    setTimeout(showInitialState, 500);
    startAutoplay();
  }
  
  function preloadImages(images) {
    images.forEach(img => {
      const image = new Image();
      image.src = img.src;
    });
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.product-image');
    preloadImages(images);
  
    document.querySelectorAll('[id^="carousel-container-"]').forEach(container => {
      const blockId = container.id.replace('carousel-container-', '');
      initProductCarousel(blockId);
    });
  });
</script>

{% schema %}
{
  "name": "Product Carousel",
  "target": "section",
  "settings": [
    {
      "type": "product_list",
      "id": "products",
      "label": "Select products",
      "limit": 3
    },
    {
      "type": "header",
      "content": "Carousel text color"
    },
    {
      "type": "color",
      "id": "carousel_title_color",
      "label": "Carousel title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "carousel_description_color",
      "label": "Carousel description color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "carousel_price_color",
      "label": "Carousel price color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Carousel button settings"
    },
    {
      "type": "color",
      "id": "carousel_button_color",
      "label": "Carousel button color",
      "default": "#000000"
    },
    {
      "type": "checkbox",
      "id": "show_button",
      "label": "Show button",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_price",
      "label": "Show price",
      "default": true
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Shop now"
    },
    {
      "type": "checkbox",
      "id": "button_border",
      "label": "Button border",
      "default": true
    },
    {
      "type": "select",
      "id": "button_border_radius",
      "label": "Button border radius",
      "default": "rounded-none",
      "options": [
        { "value": "rounded-sm", "label": "Rounded small" },
        { "value": "rounded-md", "label": "Rounded medium" },
        { "value": "rounded-lg", "label": "Rounded large" },
        { "value": "rounded-xl", "label": "Rounded extra large" },
        { "value": "rounded-2xl", "label": "Rounded double extra large" },
        { "value": "rounded-3xl", "label": "Rounded triple extra large" },
        { "value": "rounded-full", "label": "Full" },
        { "value": "rounded-none", "label": "None" }
      ]
    },
    {
      "type": "select",
      "id": "button_icon",
      "label": "Button icon",
      "options": [
        { "value": "none", "label": "None" },
        { "value": "arrow-right", "label": "Arrow Right â¡ï¸" },
        { "value": "arrow-left", "label": "Arrow Left â¬ï¸" },
        { "value": "cart", "label": "Shopping Cart ð" },
        { "value": "heart", "label": "Heart â¤ï¸" },
        { "value": "star", "label": "Star â­" },
        { "value": "chevron-right", "label": "Chevron Right >" },
        { "value": "chevron-left", "label": "Chevron Left <" },
        { "value": "arrow-up", "label": "Arrow Up â¬ï¸" },
        { "value": "arrow-down", "label": "Arrow Down â¬ï¸" },
        { "value": "cash", "label": "Cash ðµ" },
        { "value": "credit-card", "label": "Credit Card ð³" },
        { "value": "wallet", "label": "Wallet ð°" },
        { "value": "bag", "label": "Bag ð" }
      ],
      "default": "arrow-right"
    },
    {
      "type": "header",
      "content": "Effects settings"
    },
    {
      "type": "select",
      "id": "image_transition_effect",
      "label": "Image transition",
      "default": "translate-x-full",
      "options": [
        { "value": "translate-x-full", "label": "Translation sur l'axe X" },
        { "value": "-translate-x-full", "label": "Translation sur l'axe X inverse" },
        { "value": "translate-y-full", "label": "Translation sur l'axe Y" },
        { "value": "-translate-y-full", "label": "Translation sur l'axe Y inverse" },
        { "value": "scale-90", "label": "Zoom arriÃ¨re" },
        { "value": "scale-110", "label": "Zoom avant" },
        { "value": "blur-sm", "label": "Flou lÃ©ger" },
        { "value": "rotate-15", "label": "Rotation lÃ©gÃ¨re" },
        { "value": "-rotate-15", "label": "Rotation inverse" },
        { "value": "rotate-y-180", "label": "Flip 3D" }
      ]
    },
    {
      "type": "number",
      "id": "image_change_delay",
      "label": "DÃ©lai entre les changements d'images (ms)",
      "default": 5000,
      "info": "Minimum 3000ms - Maximum 5000ms"
    },
    {
      "type": "select",
      "id": "text_transition_effect",
      "label": "Text transition",
      "default": "translate-y-full",
      "options": [
        { "value": "translate-x-full", "label": "Translation sur l'axe X" },
        { "value": "-translate-x-full", "label": "Translation sur l'axe X inverse" },
        { "value": "translate-y-full", "label": "Translation sur l'axe Y" },
        { "value": "-translate-y-full", "label": "Translation sur l'axe Y inverse" },
        { "value": "scale-90", "label": "Zoom arriÃ¨re" },
        { "value": "scale-110", "label": "Zoom avant" },
        { "value": "blur-sm", "label": "Flou lÃ©ger" },
        { "value": "rotate-15", "label": "Rotation lÃ©gÃ¨re" },
        { "value": "-rotate-15", "label": "Rotation inverse" },
        { "value": "rotate-y-180", "label": "Flip 3D" }
      ]
    },
    {
      "type": "number",
      "id": "text_change_delay",
      "label": "DÃ©lai entre les changements de texte (ms)",
      "default": 200,
      "info": "Minimum 200ms - Maximum 300ms"
    },
    {
      "type": "select",
      "id": "animation_duration",
      "label": "Vitesse d'animation",
      "default": "700",
      "options": [
        { "value": "500", "label": "Rapide (500ms)" },
        { "value": "700", "label": "Moyenne (700ms)" },
        { "value": "1000", "label": "Lente (1000ms)" }
      ]
    },
    {
      "type": "header",
      "content": "Product Metafields"
    },
    {
      "type": "paragraph",
      "content": "To edit titles and descriptions, click the links below:"
    },
    {
      "type": "paragraph",
      "content": "[Edit products content in admin](/admin/bulk?resource_name=Product&edit=metafields.custom.title1,metafields.custom.title2,metafields.custom.title3,metafields.custom.description_short)"
    }
  ]
}
{% endschema %}
